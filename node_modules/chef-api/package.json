{
  "name": "chef-api",
  "version": "0.3.0",
  "description": "A simple chef server api wrapper",
  "author": {
    "name": "Norman Joyner",
    "email": "norman.joyner@gmail.com"
  },
  "license": "MIT",
  "main": "main",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/normanjoyner/chef-api.git"
  },
  "dependencies": {
    "request": "2.29.0",
    "ursa": "0.8.0",
    "lodash": "2.2.1"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "chef",
    "chef-api",
    "chef-server",
    "api"
  ],
  "readme": "chef-api\n====================\n\n##About\n\n###Description\nA simple client providing access the chef server api, implemented in nodejs\n\n###Author\nNorman Joyner - norman.joyner@gmail.com\n\n##Getting Started\n\n###Installation\n```\nnpm install chef-api\n```\n\n###Configuration\n\nSimply require the chef-api module, instantiate a new object, and call the ```.config()``` method to start accessing the Chef API.\n\nThe object passed to the ```.config()``` method should be configured as follows:\n```javascript\n\nvar options = {\n    user_name: \"myusername\", // (required unless using 'client_name') a chef user\n    client_name: \"myclientname\", // (required unless using 'user_name') a chef client\n    key_path: \"/Users/myusername/.chef/myusername.pem\", // (required unless using 'key') path to private key\n    key: \"-----BEGIN RSA PRIVATE KEY-----\\n...\\n-----END RSA PRIVATE KEY-----\", // (required unless using 'key_path') contents of private key\n    organization: \"myorganization\", // (required unless using 'url') organization name for use with hosted chef\n    url: \"https://mychefserver.com:4000\", // (required unless using 'organization') url for use with private chef server\n    ca: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\", // (optional) if this key is omitted, then the default CA chain will be used. If null, the client will operate unsafely and not validate the server's certificate, it set to a certificate list explicitly, that list will be used as the CA chain.\n}\n\nchef.config(options);\n```\n\nYou are now free to make API calls.\n\n###Examples\n\nExample usage with hosted chef server, accessing API using a user's pem path:\n```javascript\nvar ChefApi = require(\"chef-api\");\nvar chef = new ChefApi();\n\nvar options = {\n    user_name: \"myusername\",\n    key_path: \"/Users/myusername/.chef/myusername.pem\",\n    organization: \"myorganization\"\n}\n\nchef.config(options);\n\nchef.getNodes(function(err, res){\n    if(err)\n        throw err;\n\n    console.log(res);\n});\n```\n\nExample usage with private chef server, accessing API using a client's pem contents:\n```javascript\nvar ChefApi = require(\"chef-api\");\nvar chef = new ChefApi();\n\nvar options = {\n    client_name: \"myclientname\",\n    key: \"-----BEGIN RSA PRIVATE KEY-----\\n...\\n-----END RSA PRIVATE KEY-----\",\n    url: \"https://mychefserver.com:4000\"\n}\n\nchef.config(options);\n\nchef.getNode(\"mynodes.fqdn\", function(err, res){\n    if(err)\n        throw err;\n\n    console.log(res);\n});\n```\n\n###API Methods\n\nchef-api provides a high level abstraction from the Chef Server API. Please consult the official docs at http://docs.opscode.com/api_chef_server.html for API specifics.\n",
  "bugs": {
    "url": "https://github.com/normanjoyner/chef-api/issues"
  },
  "_id": "chef-api@0.3.0",
  "dist": {
    "shasum": "e1fe1c040b03cbad654e5414db89ec397d7256c0"
  },
  "_from": "chef-api@0.3.0",
  "_resolved": "https://registry.npmjs.org/chef-api/-/chef-api-0.3.0.tgz"
}
